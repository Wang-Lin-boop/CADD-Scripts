#!/bin/bash

function help (){
cat<<HELP

Usage: mdgo [OPTION] <parameter>

An automatic Desmond MD pipline.

Example: mdgo -i *.mae -p K -t 200 -P "chain.name A" -L "chain.name C" -G HPC_gpu01 -n 1 -b cubic

Input parameter:
  -i	Use a file name (Multiple files are wrapped in "", and split by ' ') or regular expression to represent your input file, default is *.mae.

MD System parameter:
  -N	Do you want to use negative_ion to neutralize_system? 
		Defulat is no. if you use this option, your systems will be neutralize by nagative_ion.
  -b	Define a boxshape for your systems. <cubic>
  -s	Define a boxsize for your systems.  <15.0>
		for dodecahedron_hexagon and cubic, defulat is 15.0;
		for orthorhombic or triclinic box, defulat is [15.0 15.0 15.0];
		If you want use Orthorhombic or Triclinic box, your parameter should be like "15.0 15.0 15.0"
  -p	What positive_ion do you want use to neutralize_system? <Na>
		Na, Li, K, Rb, Cs are predefined.
  -n	What nagative_ion do you want use to neutralize_system? <Cl>
		F, Cl, Br, I are predefined.
  -w	Solvent model of your systems. <TIP3P>
		SPC, TIP3P, TIP4P, TIP5P, DMSO, METHANOL are predefined.
  -c	Set a concentration to add salt, the unit is M. <0.15>
  -F	Define a force field to build your systems, If your system contain ligand or non-standard residues, OPLS_2005 is Necessary.
		OPLS_2005, S-OPLS, amber99SB-ILDN, amber03, amber99, amber99SB, charmm32, charmm36_lipids are recommended.

Minimazation parameter:
  -m	Enter the maximum simulation time for the Brownian motion simulation, in ps. <100>

MD control parameter:
  -t    Enter the Molecular dynamics simulation time for the Brownian motion simulation, in ns. <100>
  -T    Specify the temperature to be used, in kelvin. <310>
  -R    Number of Repeat simulation with different random numbers. <1>
  -P    Define a ASL to protein, such as "chain.name A"
  -L    Define a ASL to ligand, such as "res.ptype UNK"
  -C    Set constraint to an ASL, such as "chain.name A AND backbone"
  -f    Set constraint force, default is 10.
  -o    Specify the approximate number of frames in the trajectory.  <1000>
        This value is coupled with the recording interval for the trajectory and the simulation time: the number of frames times the trajectory recording interval is the total simulation time.
        If you adjust the number of frames, the recording interval is modified.

Job control:
  -H	Hostname of your queue, default is HPC_CPU.
  -G    GPU Host you wanna to use, default is  HPC_GPU.
  -D	Your Desmond path. <$Desmond>

Thank you for your using, If you found any question, Please contact wanglin3@shanghaitech.edu.cn.
HELP
}
#Default
    # MD system build
    export negaion='Cl'
    export solvent="TIP3P"
    export rezerosys=true
    export minisys=true
    export boxshape=cubic
    export boxsize=15.0
    export position=Na
    export ffid=OPLS_2005
    export NeorPo=false
    export saltconcentration=0.15
    
    # MD params
    export mintime=100
    export mdtime=100000.0
    export Host=HPC_GPU
    export num=1
    export temperature=310
    export frames=1000
    export Analysis=false
    export ProteinASL="chain.name A"
    export LigandASL="res.ptype UNK"
    export constraint=false
    export constraintASL="chain.name A AND backbone"
    export constraintForce=10

    # File and Host
    export input=*.mae
    export CPU_HOST=HPC_CPU
    export GPU_HOST=HPC_GPU

    # Desmond
    export Desmond=${Desmond}

while getopts ":hNi:s:b:p:n:w:m:H:G:D:c:f:C:t:R:P:L:T:o:F:" opt
do
  case $opt in
    h)
        help
        exit;;
    N)
        NeorPo=true;;
    i)
        input=$OPTARG;;
    s)
        boxsize=$OPTARG
        boxxyz=${boxsize}
        ;;
    b)
        boxshape=$OPTARG;;
    p)
        position=$OPTARG;;
    n)
        negaion=$OPTARG;;
    w)
        solvent=$OPTARG;;
    m)
        mintime=$OPTARG;;
    H)
        CPU_HOST=$OPTARG;;
    G)
        GPU_HOST=$OPTARG;;
    D)
        Desmond=$OPTARG;;
    c)
        saltconcentration=$OPTARG;;
    f)
        constraint=true
        constraintForce=$OPTARG
        ;;
    C)
        constraint=true
        constraintASL=$OPTARG
        ;;
    t)
        mdtime=`echo "${OPTARG} * 1000.0"|bc`;;
    R)
        num=$OPTARG;;
    P)
        Analysis=true
        ProteinASL=$OPTARG
        ;;
    L)
        Analysis=true
        LigandASL=$OPTARG
        ;;
    T)
        temperature=$OPTARG;;
    o)
        frames=$OPTARG;;
    F)
        ffid=$OPTARG;;
    ?)
      echo ""
      echo "Error: Do not use undefined options. Try -h."
      echo ""
      exit;;
  esac
done

# Check Desmond and hostfile
if [ -d ${Desmond} ];then
  if [ "${Desmond}" == "" ];then
    echo "Desmond not found. Please check your Desmond Path."
    exit
  fi
  if [ "`grep -c $CPU_HOST ${Desmond}/schrodinger.hosts`" == "0" ];then
    echo $CPU_HOST "Hostfile not found."
    exit
  fi
  if [ "`grep -c $GPU_HOST ${Desmond}/schrodinger.hosts`" == "0" ];then
    echo $GPU_HOST "Hostfile not found."
    exit
  fi
else
  echo "Desmond not found. Please check your Desmond Path."
  exit
fi

# negative_ion or positive_ion
if [ "$NeorPo"x == "true"x ];then
	neutralizeion=$negaion
elif [ "$NeorPo"x == "false"x ];then
	neutralizeion=$position
else
  echo "script not running, please ensure you want use negative_ion to neutralize_system or not."
fi

# box type and size
if [ "${boxshape}"x == "orthorhombic"x ];then
  boxsize="[${boxxyz} ]"
elif [ "${boxshape}"x == "triclinic"x ];then
  boxsize="[${boxxyz} 60.0 60.0 60.0 ]"
else
  boxsize=${boxsize}
fi

# MD control
interval=`echo "scale=1;${mdtime} / ${frames}"|bc`
seedlist=()
if [ ${num} -gt 3 ];then
    read -p "Do you really want to run more than three random simulations? Make sure you have adequate resources. Press Enter to continue and enter NO to exit!" makesure
    if [ "$makesure" == "NO" ];then
        echo "This is really a wise choice!"
        exit
    else
        echo "Your system will perform ${num} simulations at different random speeds."
        for i in $(seq 1 ${num});do
        seedlist+=("$RANDOM");done
    fi
elif [ "${num}" == "1" ];then
        seedlist=(2007)
        echo "Your system will only perform one simulation."
else
    echo "Your system will perform ${num} simulations at different random speeds."
    for i in $(seq 1 ${num});do
    seedlist+=("$RANDOM");done
fi

# report MD information
cat<<OUT

Jobs will run at $CPU_HOST and ${GPU_HOST} ;

Your MD information is as follows:

boxshape: ${boxshape}
boxsize: ${boxsize}
add salt: ${saltconcentration} M ${position}${negaion}
add ion to neutral: ${neutralizeion}
add solvent: ${solvent}
forcefield: ${ffid}
minimize_volume: ${minisys}

minimize time: ${mintime} ps

time: ${mdtime} ps
temperature: ${temperature} K
Rondom numbers list: ${seedlist[@]}
Interval time: ${interval} ps
Protein_Ligand Analysis: ${Analysis}
MD constraint: ${constraint}
OUT
if [ "$Analysis"x == "true"x ];then
cat<<ANAN
Protein ASL: ${ProteinASL}
Ligand ASL: ${LigandASL}
ANAN
fi
if [ "$constraint"x == "true"x ];then
cat<<CNCN
Constraint ASL: ${constraintASL}
CNCN
fi

#check params
fflist=("OPLS_2005" "OPLS3e" "OPLS4" "amber99SB-ILDN" "amber03" "amber99" "amber99SB" "charmm32" "charmm36_lipids" "S-OPLS")
nagativeionlist=("F" "Cl" "Br" "I")
positiveionlist=("Na" "K" "Li" "Rb" "Cs")
solventlist=("SPC" "TIP3P" "TIP4P" "TIP5P" "DMSO" "METHANOL")
boxlist=("orthorhombic" "triclinic" "dodecahedron_hexagon" "cubic")
waterlist=("SPC" "TIP3P" "TIP4P" "TIP5P")
function testarray (){
testlogic=false
for line in $2
do
if [ "$1"x == "$line"x ];then
  testlogic=true;break;fi
done
if [ "${testlogic}"x == "true"x ];then
  echo "Note: Parameter "$1" is vaild.";
else
  echo "Error: your parameter "$1" is unvaild, please check it." ;echo ""
  exit
fi
}
testarray $ffid "${fflist[*]}"
testarray $boxshape "${boxlist[*]}"
testarray $solvent "${solventlist[*]}"
testarray $position "${positiveionlist[*]}"
testarray $negaion "${nagativeionlist[*]}"

# process water information
for line in ${waterlist[@]}; do
if [ "$solvent" == "$line" ];then
  water="water = ${solvent}"
  break
fi; done

# Check input file
if ls $input >/dev/null 2>&1;then
  echo ""
  echo "These mae files will be processed:"
  for i in `ls $input`; do echo $i;done
else
  echo "Error: mae file not found, please check it."
  exit
fi
echo ""

# Parse constraint
if [ "$constraint"x == "true"x ];then
    constraintDescription="restrain = {atom = "asl:$constraintASL" force_constant = $constraintForce}"
else
    constraintDescription="restrain = none"
fi

GenParamFiles(){
# Generate MSJ file
cat <<EOF > $1/mdgo.msj
task {
  task = "desmond:auto"
  set_family = {
    simulate = {
    checkpt.write_last_step = no
    }
  }
}

build_geometry {
  add_counterion = {
       ion = ${neutralizeion}
       number = neutralize_system
  }
  box = {
     shape = ${boxshape}
     size = ${boxsize}
     size_type = buffer
  }
  override_forcefield = ${ffid}
  rezero_system = ${rezerosys}
  minimize_volume = ${minisys}
  salt = {
     concentration = ${saltconcentration}
     negative_ion = ${negaion}
     positive_ion = ${position}
  }
  solvent = ${solvent}
}

assign_forcefield {
  forcefield = ${ffid}
  ${water}
}

simulate {
    title       = "Brownian Dynamics NVT, T = 10 K, small timesteps, and restraints on solute heavy atoms, 100ps"
    annealing   = off
    time        = 100
    timestep    = [0.001 0.001 0.003 ]
    temperature = 10.0
    ensemble = {
        class = "NVT"
        method = "Brownie"
        brownie = {
            delta_max = 0.1
        }
    }
    restrain = {
        atom = "solute_heavy_atom"
        force_constant = 50.0
    }
}

simulate {
    title       = "Brownian Dynamics NVT, T = 10 K, small timesteps, and restraints on user defined sets, ${mintime}ps"
    annealing   = off
    time        = ${mintime}
    timestep    = [0.001 0.001 0.003 ]
    temperature = 10.0
    ensemble = {
        class = "NVT"
        method = "Brownie"
        brownie = {
            delta_max = 0.1
        }
        thermostat = {
            tau = 1.0
        }
    }
    ${constraintDescription}
}

simulate {
    title       = "Langevin NVT, T = 10 K, small timesteps, and restraints on solute heavy atoms, 12ps"
    annealing   = off
    time        = 12
    timestep    = [0.001 0.001 0.003]
    temperature = 10.0
    restrain    = { atom = solute_heavy_atom force_constant = 50.0 }
    ensemble    = {
        class  = NVT
        method = Langevin
        thermostat.tau = 0.1
    }
    randomize_velocity.interval = 1.0
    eneseq.interval             = 0.3
    trajectory.center           = []
}

simulate {
    title       = "Langevin NPT, T = 10 K, and restraints on solute heavy atoms, 12ps"
    annealing   = off
    time        = 12
    temperature = 10.0
    restrain    = retain
    ensemble    = {
        class  = NPT
        method = Langevin
        thermostat.tau = 0.1
        barostat  .tau = 50.0
    }
    randomize_velocity.interval = 1.0
    eneseq.interval             = 0.3
    trajectory.center           = []
}

simulate {
    title       = "Langevin NPT and restraints on solute heavy atoms, 12ps"
    effect_if   = [["@*.*.annealing"] 'annealing = off temperature = "@*.*.temperature[0][0]"']
    time        = 12
    restrain    = retain
    ensemble    = {
        class  = NPT
        method = Langevin
        thermostat.tau = 0.1
        barostat  .tau = 50.0
    }
    randomize_velocity.interval = 1.0
    eneseq.interval             = 0.3
    trajectory.center           = []
}

simulate {
    title       = "Langevin NPT and no restraints, 24ps"
    effect_if   = [["@*.*.annealing"] 'annealing = off temperature = "@*.*.temperature[0][0]"']
    time        = 24
    ensemble    = {
        class  = NPT
        method = Langevin
        thermostat.tau = 0.1
        barostat  .tau = 2.0
    }
    eneseq.interval   = 0.3
    trajectory.center = solute
}

simulate {
    title    = "Final MD, ${mdtime} ps"
    cfg_file = "mdgo.cfg"
    jobname  = "\$MASTERJOBNAME"
    dir      = "."
    compress = ""
}

EOF

if [ "$Analysis"x == "true"x ];then
cat<<MSJAA >> $1/mdgo.msj

pl_analysis {
    ligand_asl = "$LigandASL"
    protein_asl = "$ProteinASL"
}
MSJAA
fi

cat<<MDCFG > $1/mdgo.cfg

annealing = false
backend = {
}
bigger_rclone = false
checkpt = {
    first = 0.0
    interval = 240.06
    name = "\$JOBNAME.cpt"
    write_last_step = true
}
cpu = 1
cutoff_radius = 9.0
elapsed_time = 0.0
energy_group = false
eneseq = {
    first = 0.0
    interval = 1.2
    name = "\$JOBNAME\$[_replica\$REPLICA\$].ene"
}
ensemble = {
barostat = {
    tau = 2.0
}
class = NPT
method = MTK
thermostat = {
    tau = 1.0
}
}
glue = solute
maeff_output = {
    first = 0.0
    interval = 120.0
    name = "\$JOBNAME\$[_replica\$REPLICA\$]-out.cms"
    periodicfix = true
    trjdir = "\$JOBNAME\$[_replica\$REPLICA\$]_trj"
}
meta = false
meta_file = ?
pressure = [1.01325 isotropic ]
randomize_velocity = {
    first = 0.0
    interval = inf
    seed = $2
    temperature = "@*.temperature"
}
$constraintDescription
simbox = {
    first = 0.0
    interval = 1.2
    name = "\$JOBNAME\$[_replica\$REPLICA\$]_simbox.dat"
}
surface_tension = 0.0
taper = false
temperature = [
    [${temperature}.0 0 ]
]
time = ${mdtime}
timestep = [0.002 0.002 0.006 ]
trajectory = {
    center = []
    first = 0.0
    format = dtr
    frames_per_file = 250
    interval = ${interval}
    name = "\$JOBNAME\$[_replica\$REPLICA\$]_trj"
    periodicfix = true
    write_velocity = false
}

MDCFG
}

for i in `ls $input`; do
for seed in ${seedlist[@]};do
    mkdir ${i%%.mae*}-${seed}-md
    GenParamFiles ${i%%.mae*}-${seed}-md ${seed}
    cd ${i%%.mae*}-${seed}-md
    $Desmond/utilities/multisim -JOBNAME ${i%%.mae*}-md -HOST $CPU_HOST -SUBHOST $GPU_HOST -maxjob 1 -cpu 1 -m mdgo.msj -c mdgo.cfg -lic DESMOND_ACADEMIC:16  -o ${i%%.mae*}-md-out.cms ../$i
    cd ..
    date
    echo "MD system ${i%%.mae*} with ${seed} seed had been submitted to $CPU_HOST and $GPU_HOST."
done
done

cat<<FF

All jobs are running!
Thank you for your using, If you found any question, Please contact wanglin3@shanghaitech.edu.cn.

FF

