#!/bin/bash

#Database Path
CBCF=/public/home/baifang/compounds_library/CBCF-lib
SIAIS=/public/home/baifang/compounds_library/SIAIS-lib
HMDB=/public/home/baifang/Database/HMDB
Chemdiv=/public/home/baifang/compounds_library/Chemdiv_Feb2018
ZincLead=/public/home/baifang/Database/Zinc_lead_like_ligprep_out
HMDBmembrane=/public/home/baifang/Database/HMDB-membrane.phdb
Drugbank=/public/home/baifang/compounds_library/Drugbank
TCMD=/public/home/baifang/compounds_library/Natural_product
CNCL=/public/home/baifang/compounds_library/CNCL
Spec=/public/home/baifang/compounds_library/Spec
ChemBridge=/public/home/baifang/compounds_library/ChemBridge
HMDBendo=/public/home/baifang/compounds_library/HMDB-Endo
LifeChemical=/public/home/baifang/compounds_library/Lifechemicals
CD=/public/home/baifang/compounds_library/Comprehensive_library/

Database=CBCF
Databaselist=("CBCF" "SIAIS" "HMDB" "Chemdiv" "ZincLead" "HMDBmembrane" "Drugbank" "TCMD" "CNCL" "Spec" "ChemBridge" "HMDBendo" "LifeChemical" "CD")

#Host and Schrodinger Path
Host=HPC_CPU
SCHRODINGER=${SCHRODINGER}

input=*.zip

Filterotherthing=false
dbPath=
FilterReactivegroup=false;FilterMW=true;
MWmax=550;MWmin=0;Reactivegroups="Reactive_groups == 0";smaptime=1;
poseperligand=1
HTVS=true

testarray (){
testlogic=false
for line in $2
do
if [ "$1"x == "$line"x ];then
  testlogic=true;break;fi
done
if [ "${testlogic}"x == "true"x ];then
  echo "Note: Database "$1" is vaild.";
else
  echo "" ; echo $2" are supported to this option."
  echo "Error: your parameter "$1" is unvaild, please check it." ;echo ""
  exit
fi
}

help(){
cat<<HELP

Perform Virtual Screening Workflow.

Usage: Vsgo [OPTION] <parameter>

Example: 
1) Vsgo -i *.zip -D CBCF -s 10 -N 20 -H HPC_CPU
2) Vsgo -i *.zip -D ChemBridge -M 650 -m 300 -N 30 -H HPC_CPU
3) Vsgo -i *.zip -D Spec -r -N 10 -H HPC_CPU
4) Vsgo -i *.zip -D ZincLead -R -N 80 -H HPC_CPU


Input parameter:
  -i	Gird file input.
        Use a file name (Multiple files are wrapped in "", and split by ' ') or regular expression to represent your input Grid file, default is *.zip.

VS control parameter:
  -D    Which databases do you want to screen? Default is CBCF. <CBCF>
            CBCF SIAIS Chemdiv ZincLead HMDB HMDBmembrane Drugbank TCMD CNCL ChemBridge HMDBendo LifeChemical Spec are Supported.
            Different chemical libraries use different VS protocol. You usually do not need to change the settings specially.
  -d    Provide your own database path, the compounds files are recommended as maegz or SDF file format.
  -M    The maximum molecular weight your receptor can contain (usually your reference ligand +150) <550>
  -m    Set a minimum molecular weight to filter the ligands to be screened. <0>
  -o    Number of Output. Set how many ligand postures are output for visual screening. <2000>
        This value usually depends on the size of the compound library. Note to adjust the value, otherwise you may not get the expected results.
  -R    Remove reactive compounds from the compound library. Default is flase, use this option will set it true.
  -r    Virtual screening is performed with only reactive compounds, and if you do not know what this option is talking about, use it with caution.
  -F    Use other options to pre filter compounds, which will open interactive Options.
  -s    Keep HTVS outpose to SP. This is usually a percentage. <20>
  -x    Keep HTVS outpose to XP. This is usually a percentage. <10>
  -E    Enhanced sampling was used in the XP to generate multiple conformations. Default is flase.
  -e    Enhanced sampling was used in the SP to acquire a more accurate conformation. Default is flase.
  -c    The number of conformations generated by each ligand in the final docking protocol. <1>

Job control:
  -H	Hostname of your queue, defult is HPC_CPU.
  -N    The number of threads you want to use in this task. No more than 100.
  -S	Your Schrodinger path.

Thank you for your using, If you found any problem, Please contact wanglin3@shanghaitech.edu.cn.
HELP
}

while getopts ":hi:H:N:S:D:d:M:m:o:RrF:s:x:c:Ee" opt
do
  case $opt in
    h)
        help
        exit;;
    i)
        input=$OPTARG
        if ls $input >/dev/null 2>&1;then
        echo "These grid files will be processed:"
        for i in $input; do echo $i;done
        else
        echo "Error: Grid file not found, please check it."
        exit
        fi;;
    H)
        Host=$OPTARG;;
    N)
        Njobs=$OPTARG;;
    S)
        SCHRODINGER=$OPTARG;;
    D)
        Database=$OPTARG
        testarray $Database "${Databaselist[*]}"
        if [ "$Database"x == "CBCF"x ];then
            HTVS=true;SP=true;percentage=15;XP=flase;NUMout=1000;
        elif [ "$Database"x == "SIAIS"x ];then
            HTVS=true;SP=true;percentage=30;XP=flase;NUMout=1000;
        elif [ "$Database"x == "HMDB"x ];then
            HTVS=true;SP=true;percentage=50;XP=flase;NUMout=2000;smaptime=3;
        elif [ "$Database"x == "HMDBmembrane"x ];then
            HTVS=true;SP=true;percentage=50;XP=flase;NUMout=2000;smaptime=3;
        elif [ "$Database"x == "Chemdiv"x ];then
            HTVS=true;SP=true;percentage=10;XP=flase;NUMout=3000;
        elif [ "$Database"x == "ZincLead"x ];then
            HTVS=true;SP=true;percentage=5;XP=flase;NUMout=5000;
        elif [ "$Database"x == "Drugbank"x ];then
            HTVS=true;SP=true;percentage=50;XP=flase;NUMout=1000;smaptime=2;
        elif [ "$Database"x == "TCMD"x ];then
            HTVS=true;SP=true;percentage=50;XP=flase;NUMout=1000;
        else
            HTVS=true;SP=true;percentage=20;XP=flase;NUMout=2000;
        fi
        dbPath=$(eval echo \${$Database})
        ;;
    d)
        Database=UserDefined
        dbPath=$OPTARG
        HTVS=true;SP=true;percentage=20;XP=flase;NUMout=2000;
        if ls ${dbPath} >/dev/null 2>&1;then
            echo "Your Database has been located in "$dbPath.
        else
            echo "Your Database is non-existent or No files found."
            exit
        fi
        ;;
    M)
        FilterMW=true;MWmax=$OPTARG
        echo "We will discard ligands with molecular weight greater than "$MWmax"."
        ;;
    m)
        FilterMW=true;MWmin=$OPTARG
        echo "We will discard ligands with molecular weight less than "$MWmin"."
        ;;
    o)
        NUMout=$OPTARG;;
    R)
        FilterReactivegroup=true
        echo "We will remove ligands with reactive functional groups."
        ;;
    r)
        FilterReactivegroup=true
        Reactivegroups="Reactive_groups >= 1"
        echo "We will retain only reactive molecules."
        ;;
    F)
        Filterotherthing=true;;
    s)
        SPpercentage=$OPTARG
        SP=true;XP=false;
        ;;
    x)
        XPpercentage=$OPTARG
        XP=true;SP=false;
        ;;
    c)
        poseperligand=$OPTARG;;
    E)
        Esamp=true
        ;;
    e)
        smaptime=2
        ;;
    ?)
        echo ""
        echo "Error: Do not use undefined options."
        echo ""
        help
        exit;;
    esac
done

if [ -d ${SCHRODINGER} ];then
  if [ "${SCHRODINGER}" == "" ];then
    echo "SCHRODINGER not found. Please check your SCHRODINGER Path."
    exit
  fi
  if [ "`grep -c $Host ${SCHRODINGER}/schrodinger.hosts`" == "0" ];then
    echo $Host "Host not found."
    exit
  fi
else
  echo "SCHRODINGER not found. Please check your SCHRODINGER Path."
  exit
fi

echo "Your Job dictionary:"
pwd

for INPUT in $input
do
    mkdir ${Database}-${INPUT%%.zip*}-VS ; cd ${Database}-${INPUT%%.zip*}-VS
    if [ "${dbPath:-5}"x == ".phdb"x ];then
        cat<<INPUDB > ${Database}-${INPUT%%.zip*}-VS.inp
########## Virtual Screening Workflow Input File ###############
# Run as: $SCHRODINGER/vsw <inputfile> 

[SET:INPUT_DATABASE]
    VARCLASS   PhaseDB
    PATH   "$dbPath"

[STAGE:ORIGINAL_LIGANDS]
    STAGECLASS   phase.DBExportStage
    INPUTS   INPUT_DATABASE,
    OUTPUTS   ORIGINAL_LIGANDS,
    OUTFORMAT   maegz
    MAX_CONFS   1
INPUDB
    else
    cat<<INPA > ${Database}-${INPUT%%.zip*}-VS.inp
########## Virtual Screening Workflow Input File ###############
# Run as: $SCHRODINGER/vsw <inputfile> 

[SET:ORIGINAL_LIGANDS]
    VARCLASS   Structures
INPA
    LIGfiles="    FILES   "
    for i in ${dbPath}/*;do
        LIGfiles="${LIGfiles}\"${i}\", "
    done
    echo $LIGfiles >> ${Database}-${INPUT%%.zip*}-VS.inp
    fi

    cat<<INPB >> ${Database}-${INPUT%%.zip*}-VS.inp

[SET:GRID]
    VARCLASS   Grid
    FILE   "../$INPUT"

INPB

    if [[ "$FilterMW"x == "false"x ]]&&[[ "$FilterReactivegroup"x == "false"x ]]&&[[ "$Filterotherthing"x == "false"x ]];then
        echo "NOTE: There are no filtering tasks to perform."
        HTVSin=ORIGINAL_LIGANDS
    else
        HTVSin=CUSTOMFILTER_OUT
        cat<<CONDITIONS > filter.lff
#
# Filter criteria
#
CONDITIONS
        if [ "$FilterMW" == "true" ];then
            echo "Molecular_weight <= ${MWmax} AND >= ${MWmin}" >> filter.lff
        fi
	if [ "$FilterReactivegroup" == "true" ];then
            echo "${Reactivegroups}" >> filter.lff
        fi
	if [ "$Filterotherthing" == "true" ];then
            stopinteractiveread=no
            while [ "$stopinteractiveread"x == "no"x ]
            do
                read -p "What's your criteria name? Such as, Molecular_weight, Num_rings." criterianame
                read -p "What is the value corresponding to criteria name? For example, The corresponding value of molecular weight could be '<= 450 AND >= 200'" criteriavalue
                echo "${criterianame}             ${criteriavalue}" >> filter.lff
                read -p "Do you want to add another criteria? yes or no" stopinteractiveread
            done
        fi
        echo "Ciriteria for this VS task is printed as follow:"
        cat filter.lff | tail -n +4
        cat<< FIL >> ${Database}-${INPUT%%.zip*}-VS.inp
[STAGE:CUSTOMFILTER]
    STAGECLASS   filtering.LigFilterStage
    INPUTS   ORIGINAL_LIGANDS,
    OUTPUTS   CUSTOMFILTER_OUT,
    FILTER_FILE   filter.lff

FIL
    fi

    if [ "$HTVS"x == "true"x ];then
        cat<<HTVS >> ${Database}-${INPUT%%.zip*}-VS.inp
[STAGE:PRE_DOCK_HTVS]
    STAGECLASS   gencodes.RecombineStage
    INPUTS   ${HTVSin},
    OUTPUTS   RECOMBINE_OUT,
    NUMOUT   njobs
    OUTFORMAT   maegz
    MIN_SUBJOB_STS   4000
    MAX_SUBJOB_STS   40000
    GENCODES   YES
    OUTCOMPOUNDFIELD   s_vsw_compound_code
    OUTVARIANTFIELD   s_vsw_variant
    UNIQUEFIELD   NONE

[STAGE:DOCK_HTVS]
    STAGECLASS   glide.DockingStage
    INPUTS   RECOMBINE_OUT, GRID
    OUTPUTS   HTVS_OUT,
    RECOMBINE   NO
    PRECISION   HTVS
    UNIQUEFIELD   s_vsw_compound_code
    PERCENT_TO_KEEP   ${percentage}
    DOCKING_METHOD   confgen
    POSES_PER_LIG   1
    BEST_BY_TITLE   NO
    LIG_VSCALE   0.8
    LIG_CCUT   0.15
    MAXATOMS   300
    MAXROTBONDS   50
    AMIDE_MODE   penal
    POSE_OUTTYPE   LIB
    POSTDOCK   YES
    POSTDOCKSTRAIN   NO
    COMPRESS_POSES   YES
    EPIK_PENALTIES   YES
    FORCEPLANAR   NO

[STAGE:PULL_HTVS]
    STAGECLASS   pull.PullStage
    INPUTS   HTVS_OUT, RECOMBINE_OUT
    OUTPUTS   HTVS_OUT_ORIG,
    UNIQUEFIELD   s_vsw_compound_code

[USER_HTVS_OUTS]
    USEROUTS   HTVS_OUT
    STRUCTOUT   HTVS_OUT

HTVS
    fi
    if [[ "$SP"x == "true"x ]] ;then
    cat<<SP >> ${Database}-${INPUT%%.zip*}-VS.inp
[STAGE:PRE_DOCK_SP]
    STAGECLASS   gencodes.RecombineStage
    INPUTS   HTVS_OUT_ORIG,
    OUTPUTS   DOCK_SP_INPUT,
    NUMOUT   njobs
    OUTFORMAT   maegz
    MIN_SUBJOB_STS   300
    MAX_SUBJOB_STS   3000
    GENCODES   NO
    UNIQUEFIELD   s_vsw_compound_code

[STAGE:DOCK_SP]
    STAGECLASS   glide.DockingStage
    INPUTS   DOCK_SP_INPUT, GRID
    OUTPUTS   F_OUT,
    RECOMBINE   NO
    PRECISION   SP
    UNIQUEFIELD   s_vsw_compound_code
    NUM_TO_KEEP   ${NUMout}
    DOCKING_METHOD   confgen
    POSES_PER_LIG   ${poseperligand}
    WRITE_XP_DESC   NO
    NENHANCED_SAMPLING   ${smaptime}
    BEST_BY_TITLE   YES
    LIG_VSCALE   0.8
    LIG_CCUT   0.15
    MAXATOMS   300
    MAXROTBONDS   50
    AMIDE_MODE   penal
    POSE_OUTTYPE   PV
    POSTDOCK   YES
    POSTDOCKSTRAIN   NO
    COMPRESS_POSES   YES
    EPIK_PENALTIES   YES
    FORCEPLANAR   NO

SP
    elif [[ "$XP"x == "true"x ]]&&[[ "$Esamp"c == "true"c ]];then
        cat<<XPE >> ${Database}-${INPUT%%.zip*}-VS.inp
[STAGE:MMFFS]
    STAGECLASS   macromodel.ConfSearchStage
    INPUTS   HTVS_OUT_ORIG,
    OUTPUTS   MMFFS_OUT,
    FORCE_FIELD   MMFFs
    MINI_METHOD   TNCG
    SOLVENT   Water
    CUTOFF   Extended

[STAGE:OPLS]
    STAGECLASS   macromodel.ConfSearchStage
    INPUTS   HTVS_OUT_ORIG,
    OUTPUTS   OPLS_OUT,
    FORCE_FIELD   OPLS_2005
    MINI_METHOD   TNCG
    SOLVENT   Water
    CUTOFF   Extended

[STAGE:COMBINE]
    STAGECLASS   combine.CombineStage
    INPUTS   HTVS_OUT_ORIG, MMFFS_OUT, OPLS_OUT
    OUTPUTS   MIN_COMBINED,
    LABELFIELD   s_vsw_conformer_field
    LABELS   Original, MMFFS, OPLS

[STAGE:PRE_DOCK_XP]
    STAGECLASS   gencodes.RecombineStage
    INPUTS   MIN_COMBINED,
    OUTPUTS   DOCK_XP_INPUT,
    NUMOUT   njobs
    OUTFORMAT   maegz
    MIN_SUBJOB_STS   20
    MAX_SUBJOB_STS   200
    GENCODES   NO
    UNIQUEFIELD   s_vsw_compound_code

[STAGE:DOCK_XP]
    STAGECLASS   glide.DockingStage
    INPUTS   DOCK_XP_INPUT, GRID
    OUTPUTS   F_OUT,
    RECOMBINE   NO
    PRECISION   XP
    UNIQUEFIELD   s_vsw_compound_code
    NUM_TO_KEEP   ${NUMout}
    DOCKING_METHOD   confgen
    POSES_PER_LIG   ${poseperligand}
    WRITE_XP_DESC   NO
    BEST_BY_TITLE   YES
    LIG_VSCALE   0.8
    LIG_CCUT   0.15
    MAXATOMS   300
    MAXROTBONDS   50
    AMIDE_MODE   penal
    POSE_OUTTYPE   PV
    POSTDOCK   YES
    POSTDOCKSTRAIN   NO
    COMPRESS_POSES   YES
    EPIK_PENALTIES   YES
    FORCEPLANAR   NO

XPE
    else
        cat<<XP >> ${Database}-${INPUT%%.zip*}-VS.inp
[STAGE:PRE_DOCK_XP]
    STAGECLASS   gencodes.RecombineStage
    INPUTS   HTVS_OUT_ORIG,
    OUTPUTS   DOCK_XP_INPUT,
    NUMOUT   njobs
    OUTFORMAT   maegz
    MIN_SUBJOB_STS   20
    MAX_SUBJOB_STS   200
    GENCODES   NO
    UNIQUEFIELD   s_vsw_compound_code

[STAGE:DOCK_XP]
    STAGECLASS   glide.DockingStage
    INPUTS   DOCK_XP_INPUT, GRID
    OUTPUTS   F_OUT,
    RECOMBINE   NO
    PRECISION   XP
    UNIQUEFIELD   s_vsw_compound_code
    NUM_TO_KEEP   ${NUMout}
    DOCKING_METHOD   confgen
    POSES_PER_LIG   ${poseperligand}
    WRITE_XP_DESC   NO
    BEST_BY_TITLE   YES
    LIG_VSCALE   0.8
    LIG_CCUT   0.15
    MAXATOMS   300
    MAXROTBONDS   50
    AMIDE_MODE   penal
    POSE_OUTTYPE   PV
    POSTDOCK   YES
    POSTDOCKSTRAIN   NO
    COMPRESS_POSES   YES
    EPIK_PENALTIES   YES
    FORCEPLANAR   NO

XP
    fi

cat<<FOUT >> ${Database}-${INPUT%%.zip*}-VS.inp
[USEROUTS]
    USEROUTS   F_OUT
    STRUCTOUT   F_OUT
FOUT

${SCHRODINGER}/vsw ${Database}-${INPUT%%.zip*}-VS.inp -OVERWRITE -host_glide "${Host}:${Njobs}" -adjust -NJOBS ${Njobs} -HOST "${Host}:${Njobs}" -DRIVERHOST "${Host}" -TMPLAUNCHDIR
cd ..
done














